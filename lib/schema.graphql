"Validates level types"
enum Level {
  beginner
  intermediate
  advance
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  students: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String!
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String!
}

type Query {
  "Retrieve all courses"
  courses: [Course]
  "Retrieve one course"
  course(id: ID!): Course
  "Retrieve all people"
  people: [Person]
  "Retrieve one Pperson"
  person(id: ID!): Person
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Creates a course"
  course(input: CourseInput!): Course
  "Edits a course"
  editCourse(id: ID!, input: CourseEditInput): Course
  "Deletes a course"
  deleteCourse(id: ID!): Boolean
  "Creates a person"
  person(input: PersonInput!): Person
  "Edits a person"
  editPerson(id: ID!, input: PersonEditInput): Person
  "Deletes a person"
  deletePerson(id: ID!): Boolean
  "Assignate person to one course"
  assignPerson(courseId: ID!, personId: ID!): Course
}
